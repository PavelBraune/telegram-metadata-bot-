import telebot
import logging
import os
import json
import datetime
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = telebot.logger
telebot.logger.setLevel(logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(os.environ.get("TG_BOT_TOKEN"), threaded=False)


def generate_response(message: telebot.types.Message) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    response = ["‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã\n"]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.forward_from_chat:
        chat = message.forward_from_chat
        response.extend([
            f"üì≤ –ü–µ—Ä–µ–¥–∞–Ω–æ –æ—Ç: <code>{chat.title}</code>",
            f"üåê ID: <code>{chat.id}</code>",
            f"üì§ –¢–∏–ø: {'–ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª' if chat.username else '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π'}"
        ])
        if chat.username:
            response.append(f"–°—Å—ã–ª–∫–∞: https://t.me/{chat.username}")
        response.append("")

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    response.append(f"üìÜ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: <code>{datetime.datetime.fromtimestamp(message.date)}</code>\n")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    content_handlers = {
        'photo': lambda: message.photo[-1],
        'video': lambda: message.video,
        'document': lambda: message.document
    }

    if message.content_type in content_handlers:
        file = content_handlers[message.content_type]()
        response.extend([
            f"üåê {message.content_type.capitalize()} File ID: <code>{file.file_id}</code>",
            f"üåê {message.content_type.capitalize()} Unique ID: <code>{file.file_unique_id}</code>"
        ])

    return "\n".join(response)


@bot.message_handler(commands=["start"])
def send_welcome(message: telebot.types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    bot.send_message(
        message.chat.id,
        "üòé –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ñ–∞–π–ª, –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç, "
        "–∏ —è –≤–µ—Ä–Ω—É –≤–∞–º –≤—Å—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
    )


@bot.message_handler(content_types=[
    'text', 'photo', 'video', 'document', 'sticker', 
    'location', 'voice', 'audio'
])
def handle_message(message: telebot.types.Message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    bot.send_message(
        message.chat.id,
        generate_response(message),
        parse_mode='HTML'
    )


def handler(event: dict, context) -> dict:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Yandex Cloud Functions"""
    try:
        update = telebot.types.Update.de_json(json.loads(event["body"]))
        if update.message:
            bot.process_new_updates([update])
    except Exception as e:
        logger.error(f"Error processing update: {e}")

    return {"statusCode": 200, "body": "ok"}
